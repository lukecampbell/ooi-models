Scenario,ID,HID,Name,Instrument Class,Instrument Series,Function Type,Function,Owner,Args,Kwargs,Description,SKIP
DOC,Unique Identifier,"Human readable Unique Identifier

Name + _ + InstCls + _ + InstSer",Cannonical Name for the Function,,,NumexprFunction or PythonFunction,"for NumexprFunction:
A string algorithm containing #'s, operators, and variables.  Variables must be in the associated Parameter Map

for PythonFunction:
The string name of the function contained in Owner","ONLY FOR PythonFunction

The package/module that contains the function","

The list of arguments to feed into the function.  These must be available keys in the associated Parameter Map.","ONLY FOR PythonFunction

A dictionary of keyword arguments to feed into the function

NOT YET SUPPORTED",,
LC_TEST,PFID1,TEMPWAT_L1_CTDMO_,TEMPWAT_L1,CTDMO,,NumexprFunction,(T / 10000) - 10,,['T'],,,
LC_TEST,PFID2,,CONDWAT_L1,CTDMO,,NumexprFunction,(C / 100000) - 0.5,,['C'],,,
LC_TEST,PFID3,,PRESWAT_L1,CTDMO,,NumexprFunction,(P * p_range / (0.85 * 65536)) - (0.05 * p_range),,"['P', 'p_range']",,,
LC_TEST,PFID4,,CONDWAT_10,CTDMO,,NumexprFunction,C*10,,['C'],,,
LC_TEST,PFID5,,PRACSAL_L2,CTDMO,,PythonFunction,sp_from_c,pygsw.vectors,"['C','t','p'] ",,,
BETA,PFID6,,SFLPRES_L1,"PRESF, PREST",All,NumexprFunction,p_psia * 0.689475728,,['p_psia'],,Scaling function to convert the absolute pressure measurement in psi to dbar.,
LC_TEST,PFID7,,sa,CTDMO,,PythonFunction,sa_from_sp,pygsw.vectors,"['sp','p','lon','lat']",,,
LC_TEST,PFID8,,rho,CTDMO,,PythonFunction,data_density,ion_functions.data.data_functions,"['SP','p','t','lat','lon']",,,
LC_TEST,PFID9,,conductivity_L1,TEST,,NumexprFunction,(conductivity / 100000.0) - 0.5,,['conductivity'],,,
LC_TEST,PFID10,,pressure_L1,TEST,,NumexprFunction,(pressure / 100.0) + 0.5,,['pressure'],,,
LC_TEST,PFID11,,temp_L1,TEST,,NumexprFunction,(temperature / 10000.0) - 10,,['temperature'],,,
LC_TEST,PFID12,,density_L2,TEST,,PythonFunction,data_l2_density,ion_functions.workflow_tests.fake_data,"['conductivity', 'temp', 'pressure', 'lat', 'lon']",,,
LC_TEST,PFID13,,salinity_L2,TEST,,PythonFunction,data_l2_salinity,ion_functions.workflow_tests.fake_data,"['conductivity', 'temp', 'pressure']",,,
LC_TEST,PFID14,,calibrated_temperature,TEST,,NumexprFunction,(temperature + offset),,"['temperature', 'offset']",,,
LC_TEST,PFID15,,explicit_lookup,TEST,,NumexprFunction,lookup,,['lookup'],,,
LC_TEST,PFID16,,extended_calibrated_temperature,TEST,,NumexprFunction,lookup1 + lookup2,,"['lookup1', 'lookup2']",,,
BASE,PFID17,,global_range_test,,,PythonFunction,dataqc_globalrangetest_minmax,ion_functions.qc.qc_functions,"['dat','dat_min','dat_max']",,,
LC_TEST,PFID18,,dataqc_localrangetest,,,PythonFunction,dataqc_localrangetest,ion_functions.qc.qc_functions,"['dat','z','datlim','datlimz']",,,
BASE,PFID19,,dataqc_spiketest,,,PythonFunction,dataqc_spiketest_wrapper,ion_functions.qc.qc_functions,"['dat','acc','N','L']",,,
BASE,PFID20,,dataqc_polytrendtest,,,PythonFunction,dataqc_polytrendtest_wrapper,ion_functions.qc.qc_functions,"['dat','t','ord_n','ntsd']",,,
BASE,PFID21,,dataqc_stuckvaluetest,,,PythonFunction,dataqc_stuckvaluetest_wrapper,ion_functions.qc.qc_functions,"['x','reso','num']",,,
BASE,PFID22,,dataqc_gradienttest,,,PythonFunction,dataqc_gradienttest_wrapper,ion_functions.qc.qc_functions,"['dat','x','ddatdx','mindx','startdat','toldat']",,,
LC_TEST,PFID23,,dataqc_solarelevation,,,PythonFunction,dataqc_solarelevation,ion_functions.qc.qc_functions,"['lon','lat','dt']",,,
BASE,PFID24,,dataqc_propagateflags,,,PythonFunction,dataqc_propagateflags_wrapper,ion_functions.qc.qc_functions,['strict_validation'],,,
LC_TEST,PFID25,,dataqc_condcompress,,,PythonFunction,dataqc_condcompress,ion_functions.qc.qc_functions,"['p_orig','p_new','c_orig','cpcor']",,,
BETA,PFID26,,ctd_pracsal,,,PythonFunction,ctd_pracsal,ion_functions.data.ctd_functions,"['c','t','p'] ",,,
BETA,PFID27,,ctd_density,,,PythonFunction,ctd_density,ion_functions.data.ctd_functions,"['SP','t','p','lat','lon']",,,
LC_TEST,PFID28,,adcp_beam_eastward,"ADCPS, ADCPT","(I,K), (B,D,E)",PythonFunction,adcp_beam_eastward,ion_functions.data.adcp_functions,"['b1','b2','b3','b4','h','p','r','vf','lat','lon','z','dt']",,Compute the L1 VELPROF-VLE data product from ADCPs configured to output their data in Beam Coordinates.,
LC_TEST,PFID29,,adcp_beam_northward,"ADCPS, ADCPT","(I,K), (B,D,E)",PythonFunction,adcp_beam_northward,ion_functions.data.adcp_functions,"['b1','b2','b3','b4','h','p','r','vf','lat','lon','z','dt']",,Compute the L1 VELPROF-VLN data product from ADCPs configured to output their data in Beam Coordinates.,
LC_TEST,PFID30,,adcp_beam_vertical,"ADCPS, ADCPT","(I,K), (B,D,E)",PythonFunction,adcp_beam_vertical,ion_functions.data.adcp_functions,"['b1','b2','b3','b4','h','p','r','vf']",,Compute the L1 VELPROF-VLU data product from ADCPs configured to output their data in Beam Coordinates.,
LC_TEST,PFID31,,adcp_beam_error,"ADCPS, ADCPT","(I,K), (B,D,E)",PythonFunction,adcp_beam_error,ion_functions.data.adcp_functions,"['b1','b2','b3','b4']",,Compute the L1 VELPROF-ERR data product from ADCPs configured to output their data in Beam Coordinates.,
VOID,PFID32,,adcp_beam2ins,,,PythonFunction,adcp_beam2ins,ion_functions.data.adcp_functions,"['b1','b2','b3','b4']",,"Note, these functions should not be represented here, please use the above 4 functions to convert beam measurements to desired data products",
VOID,PFID33,,adcp_ins2earth,,,PythonFunction,adcp_ins2earth,ion_functions.data.adcp_functions,"['u','v','w','heading','pitch','roll','vertical']",,"Note, these functions should not be represented here, please use the above 4 functions to convert beam measurements to desired data products",
VOID,PFID34,,adcp_magvar,,,PythonFunction,adcp_magvar,ion_functions.data.adcp_functions,"['theta','uu','vv']",,"Note, these functions should not be represented here, please use the above 4 functions to convert beam measurements to desired data products",
BETA,PFID35,,ctd_sbe16plus_tempwat,CTDBP,All,PythonFunction,ctd_sbe16plus_tempwat,ion_functions.data.ctd_functions,"['t0','a0','a1','a2','a3']",,Compute the L1 TEMPWAT data product from the SBE 16Plus V2 CTD instruments,
BETA,PFID36,,ctd_sbe16plus_preswat,CTDBP,"C,D,E,F",PythonFunction,ctd_sbe16plus_preswat,ion_functions.data.ctd_functions,"['p0','therm0','ptempa0','ptempa1','ptempa2','ptca0','ptca1','ptca2','ptcb0','ptcb1','ptcb2','pa0','pa1','pa2']",,Compute the L1 PRESWAT data product from the SBE 16Plus V2 CTD instruments,
BETA,PFID37,,ctd_sbe16plus_condwat,CTDBP,All,PythonFunction,ctd_sbe16plus_condwat,ion_functions.data.ctd_functions,"['c0','t1','p1','g','h','i','j','cpcor','ctcor']",,Compute the L1 CONDWAT data product from the SBE 16Plus V2 CTD instruments,
CW_TEST,PFID38,,adcp_scaling,"ADCPA, ADCPS, ADCPT","All, (J,L,N), (C,F,G,M)",NumexprFunction,vel / 1000.0,,['vel'],,Applying scaling function to convert L0 VELPROF data from mm/s to the L1 VELPROF in m/s.,
CW_TEST,PFID39,,pco2_abs434_ratio,PCO2W,All,PythonFunction,pco2_abs434_ratio,ion_functions.data.co2_functions,['light'],,Optical Absorbance Ratio at 434 nm,
CW_TEST,PFID40,,pco2_abs620_ratio,PCO2W,All,PythonFunction,pco2_abs620_ratio,ion_functions.data.co2_functions,['light'],,Optical Absorbance Ratio at 620 nm,
CW_TEST,PFID41,,pco2_abs434_blank,PCO2W,All,PythonFunction,pco2_abs434_blank,ion_functions.data.co2_functions,"['mtype','light','a434blnk']",,Extract Optical Absorbance Ratio at 434 nm from the blank cycle to use as a blank in calculating pCO2.,
CW_TEST,PFID42,,pco2_abs620_blank,PCO2W,All,PythonFunction,pco2_abs620_blank,ion_functions.data.co2_functions,"['mtype','light','a620blnk']",,Extract Optical Absorbance Ratio at 620 nm from the blank cycle to use as a blank in calculating pCO2.,
CW_TEST,PFID43,,pco2_thermistor,PCO2W,All,PythonFunction,pco2_thermistor,ion_functions.data.co2_functions,['traw'],,Convert the raw thermistor resistivity from counts to deg_C for use in subsequent pCO2 calculations,
CW_TEST,PFID44,,pco2_pco2wat,PCO2W,All,PythonFunction,pco2_pco2wat,ion_functions.data.co2_functions,"['mtype','light','therm','ea434','eb434','ea620','eb620','calt','cala','calb','calc','a434blnk','a620blnk']",,Compute  the L1 PCO2WAT data product from the SAMI-II pCO2 instruments,
CW_TEST,PFID45,,ph_434_intensity,PHSEN,All,PythonFunction,ph_434_intensity,ion_functions.data.ph_functions,['light'],,Extract the absorbance signal intensity at 434 nm from the light measurements collected by the SAMI-II pH instrument,
CW_TEST,PFID46,,ph_578_intensity,PHSEN,All,PythonFunction,ph_578_intensity,ion_functions.data.ph_functions,['light'],,Extract the absorbance signal intensity at 620 nm from the light measurements collected by the SAMI-II pH instrument,
CW_TEST,PFID47,,ph_thermistor,PHSEN,All,PythonFunction,ph_thermistor,ion_functions.data.ph_functions,['traw'],,Convert the raw thermistor resistivity from counts to deg_C for use in subsequent pH calculations,
CW_TEST,PFID48,,ph_phwater,PHSEN,All,PythonFunction,ph_phwater,ion_functions.data.ph_functions,"['ref','light','therm','ea434','eb434','ea578','eb578']",,Compute the L1 PHWATER data product from the SAMI-II pH instrument,
CW_TEST,PFID49,,adcp_earth_eastward,"ADCPA, ADCPS, ADCPT","All, (J,L,N), (C,F,G,M)",PythonFunction,adcp_earth_eastward,ion_functions.data.adcp_functions,"['u','v','z','lat','lon','dt']",,Scale and apply the magnetic variation correction the eastward velocity component of data collect from ADCPs using the Earth Coordinate transform. Yields VELPROF-VLE_L1 data product,
CW_TEST,PFID50,,adcp_earth_northward,"ADCPA, ADCPS, ADCPT","All, (J,L,N), (C,F,G,M)",PythonFunction,adcp_earth_northward,ion_functions.data.adcp_functions,"['u','v','z','lat','lon','dt']",,Scale and apply the magnetic variation correction the northward velocity component of data collect from ADCPs using the Earth Coordinate transform. Yields VELPROF-VLN_L1 data product,
OPTAA,PFID51,,opt_beam_attenuation,OPTAA,All,PythonFunction,opt_beam_attenuation,ion_functions.data.opt_functions,"['cref','csig','traw','cwl','coff','tcal','tbins','tc_arr','T','PS']",,Compute the beam attenuation coefficient (OPTATTN_L2) from raw OPTAA instrument output and instrument specific calibration files.,
OPTAA,PFID52,,opt_optical_absorption,OPTAA,All,PythonFunction,opt_optical_absorption,ion_functions.data.opt_functions,"['aref','asig','traw','awl','aoff','tcal','tbins','ta_arr','cpd_ts','cwl','T','PS']",,Compute the optical absorption coefficient (OPTABSN_L2) from raw OPTAA instrument output and instrument specific calibration files.,
BETA,PFID53,,nobska_mag_corr_east,VEL3D,"A,B",PythonFunction,nobska_mag_corr_east,ion_functions.data.vel_functions,"['uu','vv','lat','lon','timestamp']",,L1 VELPTTU-VLE (Nobska) by correcting L0 for compass declination and converting from cm/s to m/s.,
BETA,PFID54,,nobska_mag_corr_north,VEL3D,"A,B",PythonFunction,nobska_mag_corr_north,ion_functions.data.vel_functions,"['uu','vv','lat','lon','timestamp']",,L1 VELPTTU-VLN (Nobska) by correcting L0 for compass declination and converting from cm/s to m/s.,
BETA,PFID55,,nortek_mag_corr_east,VEL3D,"C,D",PythonFunction,nortek_mag_corr_east,ion_functions.data.vel_functions,"['uu','vv','lat','lon','timestamp']",,L1 VELPTTU-VLE (Nortek) by correcting L0 for compass declination and converting from mm/s to m/s.,
BETA,PFID56,,nortek_mag_corr_north,VEL3D,"C,D",PythonFunction,nortek_mag_corr_north,ion_functions.data.vel_functions,"['uu','vv','lat','lon','timestamp']",,L1 VELPTTU-VLN (Nortek) by correcting L0 for compass declination and converting from mm/s to m/s.,
BETA,PFID57,,nobska_scale_up_vel,VEL3D,"A,B",NumexprFunction,w / 100.0,,['w'],,L1 VELPTTU-VLN (Nobska) by converting L0 from cm/s to m/s.,
BETA,PFID58,,nortek_scale_up_vel,VEL3D,"C,D",NumexprFunction,w / 1000.0,,['w'],,L1 VELPTTU-VLN (Nortek) by converting L0 from mm/s to m/s.,
SP_TEST,PFID59,,do2_SVU,DOSTA,ALL,PythonFunction,do2_SVU,ion_functions.data.do2_functions,"['calphase','do_temp','csv']",,The Stern-Volmer-Uchida equation that converts phase into temperature corrected dissolved oxygen L1 DOCONCS,
SP_TEST,PFID60,,o2_counts_to_uM,DOSTA,ALL,NumexprFunction,(o2_counts / 10000.0) - 10.0,,['o2_counts'],,"L1 DOCONCS from a CTDBP linked DOSTA, converts counts to umol/L",
SP_TEST,PFID61,,do2_salinity_correction,DOSTA,ALL,PythonFunction,do2_salinity_correction,ion_functions.data.do2_functions,"['DO','do_temp', 'P','T','SP','lat','lon']",,Salinity and pressure correction to dissolved oxygen producing L2 DOCONCS,
CW_TEST,PFID62,,sfl_trhph_reftemp,TRHPH,ALL,NumexprFunction,27.50133 - 17.2658 * V_s + 15.83424 / V_s,,['V_s'],,TRHPH thermistor reference temperature,
CW_TEST,PFID63,,sfl_trhph_vfltemp,TRHPH,ALL,PythonFunction,sfl_trhph_vfltemp,ion_functions.data.sfl_functions,"['V_s','V_c','a','b','c','d','e']",,"L1 TRHPHTE, Vent Fluid Temperature from the TRHPH instrument class.",
CW_TEST,PFID64,,sfl_trhph_chlorconc,TRHPH,ALL,PythonFunction,sfl_trhph_chlorconc,ion_functions.data.sfl_functions,"['V_R1','V_R2','V_R3','T']",,"L2 TRHPHCC, Vent Fluid Chloride Concentration from the TRHPH instrument class.",
CW_TEST,PFID65,,sfl_trhph_vflorp,TRHPH,ALL,NumexprFunction,(ORP_V * 1000.0 - offset) / gain,,"['ORP_V','offset','gain']",,"L1 TRHPHEH, Vent Fluid Oxidation-Reduction Potential (ORP) from the TRHPH instrument class.",
LC_TEST,PFID66,,identity,NA,,NumexprFunction,x,,['x'],,Identity Function,
CW_TEST,PFID67,,partial_pressure_co2,PCO2A,ALL,NumexprFunction,xCO2 * p / 1013.25,,"['xCO2','p']",,Partial Pressure of CO2 in the atmosphere (PCO2ATM_L1) or the surface seawater (PCO2SSW_L1).,
SP_TEST,PFID68,,barpress_mbar_2_pascals,METBK,ALL,NumexprFunction,barpres * 100,,['barpress'],,convert L0 barometric pressure BARPRES in millibars(mbar) to Pascals (Pa) to produce L1 BARPRES,
SP_TEST,PFID69,,windavg_mag_corr_east,METBK,ALL,PythonFunction,windavg_mag_corr_east,ion_functions.data.met_functions,"['uu','vv','lat','lon','timestamp']",,,
SP_TEST,PFID70,,windavg_mag_corr_north,METBK,ALL,PythonFunction,windavg_mag_corr_north,ion_functions.data.met_functions,"['uu','vv','lat','lon','timestamp']",,,